'''【编程实现】

在一个神奇空间里有 N 个房间，房间从 1 到 N 编号，每个房间可能有一个或多个传送门，每个传送门都有一个编号，相同编号的传送门同时出现在多个房间中，
表示这些房间可以互通。给定两个房间的编号 A 和 B，请找出从房间 A 到达房间 B 最少需要经过几个传送门。
例如：N=3，3 个房间中传送门的编号分别为：
房间 1：1、4、6；
房间 2：2、3、4，8；
房间 3：3、6、9。
其中房间 1 和房间 2 互通，共用 4 号传送门；房间 1 和房间 3 互通，共用 6 号传送门；房间 2 和房间 3 互通，共用 3 号传送门；
([蓝桥杯青少组14届省赛python-6]神奇空间中的传送门\1.png)
当 A=1，B=2，从房间 1 到达房间 2，共有两种路线：
路线 1：从房间 1 通过 4 号传送门进入房间 2，共经过 1 个传送门；
路线 2：从房间 1 通过 6 号传送门进入房间 3，再从房间 3 通过 3 号传送门进入房间 2，共经过 2 个传送门；
故从房间 1 到达房间 2 最少需要经过 1 个传送门。
【输入描述】：
第一行输入一个正整数 N（2≤N≤20），表示房间数量
接下来输入 N 行，每行包含多个正整数（1≤正整数≤100），每行依次表示 1 到 N 号房间内所有传送门的编号，正整数之间以一个英文逗号隔开
最后一行输入两个正整数 A 和 B（1≤A≤N，1≤B≤N，且 A≠B），表示两个房间的编号，正整数之间以一个英文逗号隔开
【输出描述】：输出一个整数，表示从房间 A 到达房间 B 最少需要经过几个传送门，如果 A 房间不能到达 B 房间，则输出-1
示例一
输入：
3
1,4,6
2,3,4,8
3,6,9
1,2
输出：
1
示例二
输入：
4
1,2,3
2,3,4
4,5,6
6,7,8
1,4
输出：
3
示例三
输入：
3
1,2,3
4,5,6
7,8,9
1,2
输出：
-1'''
#检测是否有共用传送门
def connent(room_1_inx,room_2_inx):
    for i in Nportal[room_1_inx]:
        for j in Nportal[room_2_inx] :
            if i == j:
                return True
    return False

#1.输入
N = int(input())#房间数量
Nportal = []#各神奇空间中传送门编号
for i in range(N):
    portal = input().split(',')
    Nportal.append(portal)
start_end_li = input().split(',')
#-1的原因:与索引对应
start = int(start_end_li[0])-1 #起始位置
end = int(start_end_li[1])-1 #结束位置

#2.创建是否访问过的列表
visit =[]
for i in range(N):
    visit.append('未访问')

#3.进行查找最短路径
def bfs(start,end):
    visit[start] = '已访问'#将起始位置标记为已访问
    path = [[start,0]]#创建一个队列,记录路径  #[房间信息,步数]
    while len(path) != 0:#循环至列表为空
        pathne = path.pop(0)#将当前信息出队列
        if pathne[0] == end:#如果当前节点等于终点
            return pathne[1]
        for i in range(N):#3.5
            if visit[i] == '未访问' and connent(i,pathne[0]):#条件:房间满足未被访问，且当前房间有公共传送门
                path.append([i,pathne[1]+1])#将下一个房间信息与步数加入队列
                visit[i] = '已访问'#将当前房间标记为已访问
    return -1#循环结束，未到终点返回-1

print(bfs(start,end))



